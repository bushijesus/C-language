#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
// int get_max(int a, int b)
// {
//   int z = 0;
//   if (a > b)
//     return a;
//   else
//     return b;
// }
// void swap(int *a, int *b)
// {
//   int c = 0;
//   c = *a;
//   *a = *b;
//   *b = c;
// }
// int is_prime(int n)
// {
//   int j = 0;
//   for (j = 2; j <= sqrt(n); j++)
//   {
//     if (n % j == 0)
//     {
//       return 0;
//     }
//   }
//   return 1;
// }
// int is_leapyear(int j)
// {
//   if (j % 4 == 0 && j % 100 != 0 || j % 400 == 0)
//   {
//     return 1;
//   }
//   return 0;
// }
// int binary_search(int arr[], int k, int s)
// {
//   int left = 0;
//   int right = s - 1;
//   int mid = (left + right) / 2;
//   while (left <= right)
//   {
//     if (arr[mid] > k)
//     {
//       right = mid - 1;
//     }
//     else if (arr[mid] < k)
//     {
//       left = mid + 1;
//     }
//     else
//     {
//       return mid;
//     }
//   }
//   return -1;
// }
// void Add(int *p)
// {
//   (*p)++;
// }
// void print(unsigned int n)
// {
//   if (n > 9)
//   {
//     print(n / 10);
//   }
//   printf("%d", n % 10);
// }
// int my_strlen(char *str)
// {
//   if (*str != '\0')
//     return 1 + my_strlen(str + 1);
//   else
//     return 0;
// }
// int factorial(int n)
// {
//   if (n <= 1)
//     return 1;
//   else
//     return n * factorial(n - 1);
// }
// int fib(int n)
// {
//   if (n <= 2)
//     return 1;
//   else
//     return fib(n - 1) + fib(n - 2);
// }
// int FIB(int n)
// {
//   int a = 1;
//   int b = 1;
//   int c = 1;
//   while (n > 2)
//   {
//     c = a + b;
//     a = b;
//     b = c;
//     n--;
//   }
//   return c;
// }
int main()
{
  // char arr1[20]={0};
  // char arr2[]="hello world";
  // char arr3[]={0};

  // strcpy(arr1, arr2);
  // memset(arr2, '*', 6);
  // printf("%s\n",arr1);
  // printf("%s\n",arr2);
  // int max = get_max(20, 10);
  // printf("%d",max);

  // int x=10;
  // int y=20;
  // printf("交换前：x:%d,y:%d\n",x,y);
  // swap(&x,&y);
  // printf("交换后：x:%d,y:%d\n",x,y);
  // return  0;

  // int i = 0;
  // int count = 0;
  // for(i=100;i<200;i++)
  // {
  //   if(is_prime(i)==1)
  //   {
  //     printf("%d\n",i);
  //     count++;
  //   }
  // }
  // printf("%d\n",count);

  // int i = 0;
  // int count = 0;
  // for(i=1000;i<=2000;i++)
  // {
  //   if(is_leapyear(i)==1)
  //   {
  //     printf("%d,",i);
  //     count++;
  //   }
  // }

  // int arr[]={1,2,3,4,5,6,7,8,9,10};
  // int key = 7;
  // int sz = sizeof(arr)/sizeof(arr[0]);
  // int ret = binary_search(arr, key, sz);
  // if(-1 != ret)
  // {
  //   printf("not found!");
  // }
  // else
  // {
  //   printf("found it,%d",ret);
  // }
  // return 0;

  // int num = 0;
  // Add(&num);
  // printf("%d\n",num);
  // Add(&num);
  // printf("%d\n",num);
  // Add(&num);
  // printf("%d\n",num);

  // printf("%d",printf("%d",printf("%d",43)));

  // int a = 10;
  // int b = 20;
  // int Add1(int, int);
  // int c = Add1(a, b);
  // printf("%d",c);

  // unsigned int num = 0;
  // scanf("%u", num);
  // print(num);
  // return 0;

  // char arr[] = "hello";
  // printf("%d", my_strlen(arr));
  // return 0;

  // int n = 0;
  // scanf("%d", &n);
  // int ret = factorial(n);
  // printf("%d", ret);
  // return 0;

  // int n = 0;
  // scanf("%d", &n);
  // int ret = FIB(n);
  // printf("%d", ret);
  // return 0;

  // int i = 0;
  // int j = 0;
  // for (i = 1; i <= 9; i++)
  // {
  //   for (j = 1; j <= i; j++)
  //   {
  //     printf("%d*%d=%2d ", i, j, i * j);
  //   }
  //   printf("\n");
  // }
}
int Add1(int x, int y)
{
  return x + y;
}
