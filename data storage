#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int check_sys()
{
  int i = 1;
  return (*(char *)&i);
}
int main()
{
  //设计一个小程序来判断当前机器的字节序
  // int a = 1;
  // char *p = (char *)&a;
  // if (*p == 1)
  // {
  //   printf("小端");
  // }
  // else
  //   printf("大端");

  // int ret = check_sys();
  // if (ret == 1)
  // {
  //   printf("小端");
  // }
  // else
  //   printf("大端");

  // char a = -1;
  // //11111111 -> 整型提升补1
  // signed char b = -1;
  // //11111111 -> 整型提升补1
  // unsigned char c = -1;
  // //11111111 -> 整型提升补0
  // //a=-1,b=-1,c=255
  // printf("a=%d,b=%d,c=%d", a, b, c);

  // char a = -128;
  // //原码10000000000000000000000010000000
  // //反码11111111111111111111111101111111
  // //补码11111111111111111111111110000000
  // //10000000
  // //111111111111111111111111111110000000  整型提升
  // //%u认为无符号位，首位不做符号位
  // printf("%u\n",a);
  // //打印4294967168

  // char b = 128;
  // printf("%u\n",b);//同上

  // int i = -20;
  // unsigned int j = 10;
  // printf("%d\n", i + j); //-10
  // printf("%u\n", i + j); //4294967286

  // unsigned int i;
  // for (i = 9; i >= 0; i--)
  // {
  //   printf("%u\n", i);//死循环
  // }

  // char a[1000];
  // int i;
  // for (i = 0; i < 1000; i++)
  // {
  //   a[i] = -1 - i;
  // }
  // //-1 -2 -3 .. -127 -128 127 126 .. 2 1 0 -1 -2 ..
  // printf("%d", strlen(a));//找'\0'  ->  0
  // //打印255

  // unsigned char i = 0;
  // for (i = 0; i <= 255; i++)
  // {
  //   printf("hello\n");//死循环
  // }

  // int n = 9;
  // float *pfloat = (float *)&n;
  // printf("n的值为:%d\n", n);  //n的值为:9
  // printf("*pfloat的值为:%f\n", *pfloat);  //*pfloat的值为:0.000000    ->   以浮点数的视角去看

  // *pfloat = 9.0;
  // printf("n的值为:%d\n", n);  //n的值为:1091567616   ->    以浮点数的形式存储
  // printf("*pfloat的值为:%f\n", *pfloat);  //*pfloat的值为:9.000000
  // //说明整型数据和浮点型数据在计算机中的存储方式不同
  // return 0;

  
}
