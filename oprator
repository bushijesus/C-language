#include <stdio.h>
void test1(int arr[])
{
  printf("%d\n", sizeof(arr));
}
void test2(char ch[])
{
  printf("%d\n", sizeof(ch));
}

struct book
{
  char name[20];
  int price;
};
int main()
{
  // int a = 5;
  // //101
  // int b = 1;
  // //001
  // int count = 0; //原数字中1的个数
  // int c = 0;
  // do
  // {
  //   c = a & b;
  //   if (c == 1)
  //   {
  //     count++;
  //   }
  //   a = a >> 1;
  // } while (a);
  // printf("%d", count);

  // int arr[10] = {0};
  // char ch[10] = {0};
  // printf("%d\n", sizeof(arr));   //40
  // printf("%d\n", sizeof(ch));    //10
  // test1(arr);                    //8
  // test2(ch);                     //8

  // int i = 0, a = 0, b = 2, c = 3, d = 4;
  // i = a++ && ++b && d++; //a先使用后++，使用前为0，&&后不计算
  // printf("a=%d\nb=%d\nc=%d\nd=%d\n", a, b, c, d);
  // //打印:1 2 3 4
  // a = 1;
  // i = a++ || ++b || d++; //a为真，||后的不计算
  // printf("a=%d\nb=%d\nc=%d\nd=%d\n", a, b, c, d);
  // //打印:2 2 3 4

  // struct book Book = {"C lan", 20};
  // //方法一
  // printf("书名:%s\n", Book.name);
  // printf("价格:%d\n", Book.price);
  // //方法二
  // struct book *pb = &Book;
  // printf("书名:%s\n", (*pb).name);
  // printf("价格:%d\n", (*pb).price);
  // //方法三
  // printf("书名:%s\n", pb->name);
  // printf("价格:%d\n", pb->price);

  // //负数的整型提升
  // char c1 = -1; //变量c1的二进制位（补码）中只有8个比特位:11111111
  //               //因为char为有符号的char
  //               //在整型提升的时候，高位补充符号位，即11111……11111（32个1）
  // //正数的整型提升
  // char c2 = 1; //变量c1的二进制位（补码）中只有8个比特位:00000001
  //              //因为char为有符号的char
  //              //在整型提升的时候，高位补充符号位，即00……00（31个0）1
  // //无符号数的整型提升，高位补0
  // char a = 3;
  // //00000000000000000000000000000011    --整型提升
  // //00000011                            --截断
  // char b = 127;
  // //00000000000000000000000001111111    --整型提升
  // //01111111                            --截断
  // char c = a + b;
  // //00000000000000000000000000000011
  // //00000000000000000000000001111111
  // //00000000000000000000000010000010    --相加
  // //10000010    --  c
  // //11111111111111111111111110000010  --补码
  // //11111111111111111111111110000001  --反码
  // //10000000000000000000000001111110  --原码
  // printf("%d",c);  //打印整型c

  //  char x =1;
  //  printf("%u",sizeof(c));   //1
  //  printf("%u",sizeof(+c));  //4
  //  printf("%u",sizeof(-c));  //4
  //  printf("%u",sizeof(!c));  //4
  return 0;
}
