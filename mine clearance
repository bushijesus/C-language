//game.h

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROW 9
#define COL 9
#define ROWS ROW + 2
#define COLS COL + 2
#define EASY_COUNT 10
#define MID_COUNT 20
#define HARD_COUNT 30

//游戏的函数声明
void menu();
void game();
void InitBoard(char board[ROWS][COLS], int rows, int cols,char tag);
void DisplayBoard(char board[ROWS][COLS], int row, int col);
void SetMine(char mine[ROWS][COLS],int row,int col);
void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS],int row,int col);
int GetMineCount(char mine[ROWS][COLS], int x, int y);

//game.c

//游戏的函数实现
#include "game.h"
void menu()
{
  printf("***********************\n");
  printf("*********1.play********\n");
  printf("*********0.exit********\n");
  printf("***********************\n");
}
void game()
{
  char mine[ROWS][COLS] = {0}; //存放布置好的雷的信息
  char show[ROWS][COLS] = {0}; //存放排查出的雷的信息
  //初始化棋盘
  InitBoard(mine, ROWS, COLS, '0');
  InitBoard(show, ROWS, COLS, '*');
  //打印棋盘
  DisplayBoard(show, ROW, COL);
  //布置雷
  SetMine(mine, ROW, COL);
  //打印棋盘
  // DisplayBoard(mine, ROW, COL);
  //排查雷
  FindMine(mine, show, ROW, COL);
}
//初始化棋盘
void InitBoard(char board[ROWS][COLS], int rows, int cols, char tag)
{
  int i = 0;
  int j = 0;
  for (i = 0; i <= rows; i++)
  {
    for (j = 0; j <= cols; j++)
    {
      board[i][j] = tag;
    }
  }
}
void DisplayBoard(char board[ROWS][COLS], int row, int col)
{
  int i = 0;
  int j = 0;
  printf("-----扫雷游戏------\n");

  //打印列号
  for (i = 1; i <= col; i++)
  {
    printf("%d", i);
  }
  printf("\n");
  for (i = 1; i <= row; i++)
  {
    printf("%d", i); //打印行号

    for (j = 1; j <= col; j++)
    {
      printf("%c", board[i][j]);
    }
    printf("\n");
  }
}
void SetMine(char mine[ROWS][COLS], int row, int col)
{
  int count = EASY_COUNT;
  while (count)
  {
    int x = 0;
    int y = 0;
    //生产随机下标
    x = rand() % row + 1;
    y = rand() % col + 1;
    if (mine[x][y] == '0')
    {
      mine[x][y] == '1';
      count--;
    }
  }
}
void FindMine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
  //输入要排查的坐标
  //检查坐标处是不是雷：
  //如果是-->炸死，游戏结束
  //如果不是-->统计坐标周围雷的个数-->存储到show数组中，游戏继续
  int x = 0;
  int y = 0;
  int win=0;
  while (win<row+col-EASY_COUNT)
  {
    printf("请输入要排查的坐标：\n");
    scanf("%d %d", &x, &y);
    if (x >= 1 && x <= row && y >= 1 && y <= col)
    {
      if (mine[x][y] == '1')
      {
        printf("很遗憾你被炸死了，游戏结束\n");
        DisplayBoard(mine, ROW, COL);
        break;
      }
      else
      {
        int minecount = GetMineCount(mine, x, y);
        show[x][y] = minecount + '0';
        DisplayBoard(show, ROW, COL);
        win++;
      }
    }
    else
    {
      printf("坐标不合法！请重新输入！\n");
    }
  }
  if (win==row+col-EASY_COUNT)
  {
    printf("排雷成功！\n");
    DisplayBoard(mine, ROW, COL);
  }
  
}
int GetMineCount(char mine[ROWS][COLS], int x, int y)
{
  return mine[x - 1][y - 1] + mine[x - 1][y] + mine[x - 1][y + 1] + mine[x][y - 1] + mine[x][y + 1] + mine[x + 1][y - 1] + mine[x + 1][y] + mine[x + 1][y + 1] - 8 * '0';
}

//test.c

//扫雷游戏的测试
#include "game.h"

int main()
{
  srand((unsigned int)time(NULL));
  int input = 0;
  do
  {
    menu();
    printf("请选择:>");
    scanf("%d", &input);
    switch (input)
    {
    case 1:
      game();
      break;
    case 0:
      printf("退出成功");
      break;

    default:
      printf("选择错误，请重新选择！");
      break;
    }
  } while (input);

  return 0;
}
