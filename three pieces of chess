*****************test.c:*****************

#include "game.h"
void menu()
{
  printf("***********************\n");
  printf("*********1.play********\n");
  printf("*********0.exit********\n");
  printf("***********************\n");
}
void game()
{
  char board[ROW][COL];
  //初始化棋盘
  InitBoard(board, ROW, COL);
  //打印棋盘
  DisplayBoard(board, ROW, COL);
  char ret = 0; //接收游戏状态
  while (1)
  {

    //玩家下棋
    PlayerMove(board, ROW, COL);
    DisplayBoard(board, ROW, COL);

    //判断输赢
    ret = IsWin(board, ROW, COL);
    if (ret != 'C')
    {
      break;
    }

    //电脑下棋
    ComputerMove(board, ROW, COL);
    DisplayBoard(board, ROW, COL);
    //判断输赢
    // char ret = IsWin(board, ROW, COL);
    if (ret != 'C')
    {
      break;
    }
  }
  if (ret == '*')
  {
    printf("玩家赢！\n");
  }
  else if (ret == '#')
  {
    printf("电脑赢！\n");
  }
  else
  {
    printf("平局！\n");
  }
  DisplayBoard(board, ROW, COL);
}
int main()
{
  int input = 0;
  srand((unsigned int)time(NULL));
  do
  {
    menu();
    printf("请选择:>");
    scanf("%d", &input);
    switch (input)
    {
    case 1:
      printf("开始游戏\n");
      game();
      break;
    case 0:
      printf("退出游戏\n");
      break;
    default:
      printf("输入错误\n");
      break;
    }
  } while (input);

  return 0;
}

********game.h:*************

#include "game.h"

void InitBoard(char board[ROW][COL], int row, int col)
{
  int i = 0;
  int j = 0;
  for (i = 0; i < row; i++)
  {
    for (j = 0; j < col; j++)
    {
      board[i][j] = ' ';
    }
  }
}
void DisplayBoard(char board[ROW][COL], int row, int col)
{
  int i = 0;
  int j = 0;
  for (i = 0; i < row; i++)
  {
    for (j = 0; j < col; j++)
    {
      printf(" %c ", board[i][j]);
      if (j < col - 1)
        printf("|");
    }
    printf("\n");
    if (i < row - 1)
    {
      int k = 0;
      for (k = 0; k < col; k++)
      {
        printf("---");
        if (k < col - 1)
        {
          printf("|");
        }
      }
      printf("\n");
    }
  }
}
void PlayerMove(char board[ROW][COL], int row, int col)
{
  int x = 0;
  int y = 0;

  while (1)
  {
    printf("请下棋>\n");
    printf("请输入坐标：");
    scanf("%d %d", &x, &y);
    if (x >= 1 && x <= row && y >= 1 && y <= row)
    {
      if (board[x - 1][y - 1] == ' ')
      {
        board[x - 1][y - 1] = '*';
      }
      else
        printf("坐标已被占用，请重新输入\n");

      break;
    }
    else
      printf("坐标非法，请重新输入!\n");
  }
}
void ComputerMove(char board[ROW][COL], int row, int col)
{
  printf("电脑下棋>\n");
  int x = rand() % row;
  int y = rand() % col;
  while (1)
  {
    if (board[x][y] == ' ')
    {
      board[x][y] = '#';
      break;
    }
  }
}
char IsWin(char board[ROW][COL], int row, int col)
{
  int i = 0;
  //判断行相等
  for (i = 0; i < ROW; i++)
  {
    if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
    {
      return board[i][1];
    }
  }
  //判断列相等
  for (i = 0; i < ROW; i++)
  {
    if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
    {
      return board[1][i];
    }
  }
  //判断对角线
  if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
  {
    return board[1][1];
  }
  if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[1][1] != ' ')
  {
    return board[1][1];
  }
  //判断平局
  int ret = IsFull(board, ROW, COL);
  if (ret == 1)
  {
    return 'E';
  }
  else
    return 'C';
}
int IsFull(char board[ROW][COL], int row, int col)
{
  int i = 0;
  int j = 0;
  for (i = 0; i < ROW; i++)
  {
    for (j = 0; j < COL; j++)
    {
      if (board[i][j] == ' ')
      {
        return 0;
      }
    }
  }
  return 1;
}


************game.c:***********

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//符号定义
#define ROW 3
#define COL 3

//函数声明
void InitBoard(char board[ROW][COL], int row, int col);
void DisplayBoard(char board[ROW][COL], int row, int col);
void PlayerMove(char board[ROW][COL], int row, int col);
void ComputerMove(char board[ROW][COL], int row, int col);
char IsWin(char board[ROW][COL], int row, int col);
int IsFull(char board[ROW][COL], int row, int col);
