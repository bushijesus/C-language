#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void print1(int arr[3][5], int r, int c)
{
  int i = 0;
  int j = 0;
  for (i = 0; i < r; i++)
  {
    for (j = 0; j < c; j++)
    {
      printf("%d ", arr[i][j]);
    }
    printf("\n");
  }
}
void print2(int (*parr)[5], int r, int c)
{
  int i = 0;
  int j = 0;
  for (i = 0; i < r; i++)
  {
    for (j = 0; j < c; j++)
    {
      printf("%d ", *(*(parr) + i) + j);
    }
    printf("\n");
  }
}
void test(int arr[]) {}      //ok
void test(int *arr) {}       //ok
void test2(int *arr[]) {}    //ok
void test2(int **arr) {}     //ok
void test3(int arr[3][5]) {} //ok
void test3(int arr[][5]) {}  //ok
void test3(int arr[][]) {}   //err
void test3(int *arr) {}      //err
void test3(int *(arr)[5]) {} //ok
void test3(int **arr) {}     //err

void print(int *ptr, int sz)
{
  int i = 0;
  for (i = 0; i < sz; i++)
  {
    printf("%d ", *(ptr + i));
  }
}

void testp(int **ppa)
{
  **ppa = 20;
}
int testf(int x, int y)
{
  return x + y;
}
int Add(int x, int y)
{
  return x + y;
}
int Sub(int x, int y)
{
  return x - y;
}
int Mul(int x, int y)
{
  return x * y;
}
int Div(int x, int y)
{
  return x / y;
}
void menu()
{
  printf("*********************\n");
  printf("**1.add******2.sub***\n");
  printf("**3.mul******4.div***\n");
  printf("*******0.exit********\n");
  printf("*********************\n");
}
int Calc(int (*pf)(int x, int y))
{
  int x = 0;
  int y = 0;
  pirntf("请输入两个操作数:>");
  scanf("%d %d", &x, &y);
  return pf(x, y);
}
void bubble_sort(int arr[], int sz)
{
  //升序
  int i = 0;
  for (i = 0; i < sz - 1; i++)
  {
    //一趟冒泡排序
    int j = 0;
    for (j = 0; j < sz - 1 - i; j++)
    {
      if (arr[j] < arr[j + 1])
      {
        //交换
        int tmp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = tmp;
      }
    }
  }
}
void print_arr(int arr[], int sz)
{
  int i = 0;
  for (i = 0; i < sz; i++)
  {
    printf("%d ", arr[i]);
  }
  printf("\n");
}
void qsort(void *base,                             //待排序数据中第一个对象的地址
           size_t num,                             //排序数据元素的个数
           size_t size,                            //排序数据中一个元素的大小（单位：字节）
           int (*cmp)(const void *, const void *)) //用来比较待排序数据中的2个元素的函数
{
}
int cmp_int(const void *e1, const void *e2)
{
  return *(int *)e1 - *(int *)e2;
}
int sort_by_age(const void *e1, const void *e2)
{
  return ((struct stu *)e1)->age - ((struct stu *)e2)->age;
}
int sort_by_name(const void *e1, const void *e2)
{
  return strcmp(((struct stu *)e1)->name, ((struct stu *)e2)->name);
}
void qsort_struct(void *base,                             //待排序数据中第一个对象的地址
                  size_t num,                             //排序数据元素的个数
                  size_t size,                            //排序数据中一个元素的大小（单位：字节）
                  int (*cmp)(const void *, const void *)) //用来比较待排序数据中的2个元素的函数
{

  int sz = sizeof(s) / sizeof(s[0]);
  //按照年龄排序
  qsort(s, sz, sizeof(s[0]), sort_by_age);
  //按照姓名排序
  qsort(s, sz, sizeof(s[0]), sort_by_name);
}
struct stu
{
  char name[20];
  int age;
};
struct stu s[] = {{"zhangsan", 20}, {"lisi", 29}, {"wangwu", 18}};
void swap(char *buf1, char *buf2, int width)
{
  int i = 0;
  for (i = 0; i < width; i++)
  {
    char tmp = *buf1;
    *buf1 = *buf2;
    *buf2 = tmp;
    buf1++;
    buf2++;
  }
}
//void* 类型指针可以传任何类型变量的地址，但是不能解引用
void bubble_sort_pro(void *base,
                     int sz,
                     int width,
                     int (*cmp)(const void *, const void *))
{
  int i = 0;
  for (i = 0; i < sz - 1; i++)
  {
    int j = 0;
    for (j = 0; j < sz - 1 - i; j++)
    {
      if (cmp((char *)base + j * width, (char *)base + (j + 1) * width) > 0)
      {
        //交换
        swap((char *)base + j * width, (char *)base + (j + 1) * width, width);
      }
    }
  }
}
void qsort_pro()
{
  int arr[] = {1, 3, 5, 7, 9, 2, 4, 6, 8, 0};
  int sz = sizeof(arr) / sizeof(arr[0]);
  bubble_sort_pro(arr, sz, sizeof(arr[0]), cmp_int);
  print_arr(arr, sz);
}
int main()
{
  // char *ps = "hello";
  // printf("%c\n",*ps);  //打印h，说明ps指针指向字符串首个字符"h"的地址
  // printf("%s\n",ps);  //打印字符串，给首字符地址，直到找到'\0'

  // char str1[] = "hello";
  // char str2[] = "hello";
  // char *str3 = "hello";  //常量字符串->不能改
  // char *str4 = "hello";
  // if (str1 == str2)     //数组名代表首元素地址
  // {
  //   printf("str1 and str2 are same\n");
  // }
  // else
  // {
  //   printf("str1 and str2 are not same\n");
  // }
  // if (str3 == str4)   //相同的常量字符串只存了一份
  // {
  //   printf("str3 and str4 are same\n");
  // }
  // else
  // {
  //   printf("str3 and str4 are not same\n");
  // }
  // //str1 and str2 are not same
  // //str3 and str4 are same

  // int *arr1[10]; //整型指针的数组
  // char *arr2[4]; //一级字符指针的数组
  // char **arr3[5]; //二级字符指针的数组

  // int a[] = {1, 2, 3, 4, 5};
  // int b[] = {2, 3, 4, 5, 6};
  // int c[] = {3, 4, 5, 6, 7};
  // int *arr[] = {a, b, c};
  // int i = 0;
  // for (i = 0; i < 3; i++)
  // {
  //   int j = 0;
  //   for (j = 0; j < 5; j++)
  //   {
  //     // printf("%d ", *(arr[i] + j));
  //     printf("%d ",arr[i][j]);
  //   }
  //   printf("\n");
  // }

  // float f = 9.0f;
  // int *p = (int *)&f;
  // printf("%d ", *p);

  // int arr[10] = {1, 2, 3, 4, 5};
  // int(*parr)[10] = &arr; //parr是一个数组指针  ->  其中存放的是数组的地址

  // double *d[5];
  // double *(*pd)[5]; ////指向指针数组的指针

  // int arr[10] = {0};
  // int *p1 = arr;
  // int(*p2)[10] = &arr;
  // printf("%p\n", p1);   //000000000061FDF0  ->  数组首元素的地址
  // printf("%p\n", p1+1); //000000000061FDE4  --  跳过一个整型
  // printf("%p\n", p2);   //000000000061FDF0  ->  数组的地址
  // printf("%p\n", p2+1); //000000000061FE08  --  跳过整个数组

  // int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  // int(*parr)[10] = &arr;
  // int i = 0;
  // for (i = 0; i < 10; i++)
  // {
  //   printf("%d ", *(*(parr) + i));
  //   //1 2 3 4 5 6 7 8 9 10
  // }

  // int arr[3][5] = {{1, 2, 3, 4, 5}, {2, 3, 4, 5, 6}, {3, 4, 5, 6, 7}};
  // print1(arr, 3, 5);
  // /*
  // 1 2 3 4 5
  // 2 3 4 5 6
  // 3 4 5 6 7
  // */
  // print2(arr, 3, 5); //数组名表示数组首元素的地址，二维数组的首元素是第一行！
  //  /*
  // 1 2 3 4 5
  // 2 3 4 5 6
  // 3 4 5 6 7
  // */

  // int arr[5];         //整型数组
  // int *parr1[10];     //整型指针的数组
  // int(*parr2)[10];    //数组指针，该指针指向一个数组，数组10个元素，每个元素的类型是int
  // int(*parr3[10])[5]; //存储数组指针的数组，该数组能够存放10个数组指针，每个指针能够指向一个数组，数组5个元素，每个元素是int型

  // int arr1[10] = {0};
  // int *arr2[20] = {0};
  // test1(arr1); //转28行
  // test2(arr2); //转30行

  // int arr[3][5] = {0};
  // test3(arr); //转32行

  //   int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  //   int *p = arr;
  //   int sz = sizeof(arr) / sizeof(arr[0]);
  //   print(p, sz);
  //   return 0;

  // int a = 10;
  // int *pa = &a;
  // int **ppa = &pa;
  // int* arr[10];
  // testp(ppa);  //传二级指针
  // testp(&pa);  //传一级指针的地址
  // testp(arr);  //传存放一级指针的数组的首元素地址
  // printf("%d ", a);

  // printf("%p\n",testf);
  // printf("%p\n",&testf);
  // int (*pf)(int, int) = &testf; //pf为一个函数指针变量  pf==testf
  // int ret = (*pf)(3, 5);//传参
  // int ret = pf(3, 5);//等价

  // (*(void (*)())0)(); //调用0地址处的函数，该函数无参，返回类型为void
  // //1.   void (*)() -- 函数类型指针
  // //2.  (void (*)())0 -- 对0进行强制类型转换，转换为一种函数的地址
  // //3. *(void (*)())0 -- 对0地址进行了解引用操作
  // //4.(*(void (*)())0)() -- 调用0地址处的函数

  // void (*signal(int, void (*)(int)))(int);
  // //1.signal先和()结合，说明signal是函数名
  // //2.signal函数的第一个参数类型是int,第二个参数类型是函数指针，该函数指针指向一个参数类型为int，返回类型为void的函数
  // //3.signal函数返回类型也是一个函数指针，该函数指针指向一个参数类型为int，返回类型为void的函数
  // //4.signal是一次函数声明
  // //等价于
  // typedef void (*pfunc_t)(int); //对void (*)(int)的函数指针类型重命名为pfunc_t
  // pfunc_t signal(int, pfunc_t);

  // int (*pf1)(int, int) = Add;
  // int (*pf2)(int, int) = Sub;
  // int (*pfArr[2])(int, int) = {Add, Sub}; //函数指针数组

  // //写一个计算器，实现整型变量的加、减、乘、除
  // int input;
  // do
  // {
  //   menu();
  //   //转移表
  //   int (*pfArr[5])(int, int) = {NULL, Add, Sub, Mul, Div};
  //   int x;
  //   int y;
  //   int ret;
  //   printf("请选择:>");
  //   scanf("%d", &input);
  //   if (input >= 1 && input <= 4)
  //   {
  //     printf("请输入两个操作数：");
  //     scanf("%d %d", &x, &y);
  //     ret = (pfArr[input])(x, y);
  //     printf("结果是:%d", ret);
  //   }
  //   else if (input == 0)
  //   {
  //     pirntf("退出成功");
  //     break;
  //   }
  //   else
  //   {
  //     printf("选择错误!");
  //   }
  // } while (input);

  // int (*p)(int, int); //函数指针
  // int (*p2[5])(int, int); //函数指针的数组
  // int (*(*p3[5])(int, int));//p3为指向函数指针数组的指针

  // //实现计算器
  // int input = 0;
  // do
  // {
  //   int ret;
  //   menu();
  //   printf("请选择:>");
  //   scanf("%d", &input);
  //   switch (input)
  //   {
  //   case 1:
  //     ret = Calc(Add);
  //     printf("结果是:%d", ret);
  //     break;
  //   case 2:
  //     ret = Calc(Sub);
  //     printf("结果是:%d", ret);
  //     break;
  //   case 3:
  //     ret = Calc(Mul);
  //     printf("结果是:%d", ret);
  //     break;
  //   case 4:
  //     ret = Calc(Div);
  //     printf("结果是:%d", ret);
  //     break;
  //   default:
  //     break;
  //   }
  // } while (input);

  //实现冒泡排序
  // int arr[10] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
  // int sz = sizeof(arr) / sizeof(arr[0]);
  // print_arr(arr, sz);
  // bubble_sort(arr, sz);
  // print_arr(arr, sz);

  //模拟实现qsort函数
  // int arr[10] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
  // int sz = sizeof(arr) / sizeof(arr[0]);
  // //排序
  // qsort(arr, sz, sizeof(arr[0]), cmp_int);
  // //打印
  // print_arr(arr, sz);

  //使用qsort函数排序结构体数据
  // int sz = sizeof(s) / sizeof(s[0]);
  // qsort_struct(s, sz, sizeof(s[0]), qsort);

  //模仿qsort实现一个冒泡排序通用算法
  // qsort_pro();

  // 整型数组
  // int a[] = {1, 2, 3, 4};
  // pirntf("%d\n", sizeof(a));         //4*4=16
  // pirntf("%d\n", sizeof(a + 0));     //4 or 8
  // pirntf("%d\n", sizeof(*a));        //4
  // pirntf("%d\n", sizeof(a + 1));     //4 or 8
  // pirntf("%d\n", sizeof(a[1]));      //4
  // pirntf("%d\n", sizeof(&a));        //4 or 8
  // pirntf("%d\n", sizeof(*&a));       //16
  // pirntf("%d\n", sizeof(&a + 1));    //4 or 8
  // pirntf("%d\n", sizeof(&a[0]));     //4 or 8
  // pirntf("%d\n", sizeof(&a[0] + 1)); //4 or 8

  // 字符数组
  // char arr[] = {'a', 'b', 'c', 'd', 'e', 'f'};
  // printf("%d\n", sizeof(arr));         //6
  // printf("%d\n", sizeof(arr + 0));     //4 or 8
  // printf("%d\n", sizeof(*arr));        //1
  // printf("%d\n", sizeof(arr[1]));      //1
  // printf("%d\n", sizeof(&arr));        //4 or 8
  // printf("%d\n", sizeof(&arr + 1));    //4 or 8
  // printf("%d\n", sizeof(&arr[0] + 1)); //4 or 8

  // char arr[] = {'a', 'b', 'c', 'd', 'e', 'f'};
  // printf("%d\n", strlen(arr));         //随机值
  // printf("%d\n", strlen(arr + 0));     //随机值
  // printf("%d\n", strlen(*arr));        //err   -->  strlen参数应为指针
  // printf("%d\n", strlen(arr[1]));      //err
  // printf("%d\n", strlen(&arr));        //随机值
  // printf("%d\n", strlen(&arr + 1));    //随机值 - 6
  // printf("%d\n", strlen(&arr[0] + 1)); //随机值 - 1

  // char arr[]="abcdef";
  // //[a b c d e f \0]
  // printf("%d\n", sizeof(arr));         //7
  // printf("%d\n", sizeof(arr + 0));     //4 or 8
  // printf("%d\n", sizeof(*arr));        //1
  // printf("%d\n", sizeof(arr[1]));      //1
  // printf("%d\n", sizeof(&arr));        //4 or 8
  // printf("%d\n", sizeof(&arr + 1));    //4 or 8
  // printf("%d\n", sizeof(&arr[0] + 1)); //4 or 8

  // char arr[]="abcdef";
  // //[a b c d e f \0]
  // printf("%d\n", strlen(arr));         //6
  // printf("%d\n", strlen(arr + 0));     //6
  // printf("%d\n", strlen(*arr));        //err   -->  strlen参数应为指针
  // printf("%d\n", strlen(arr[1]));      //err
  // printf("%d\n", strlen(&arr));        //6
  // printf("%d\n", strlen(&arr + 1));    //随机值
  // printf("%d\n", strlen(&arr[0] + 1)); //5

  // char *p = "abcdef";
  // printf("%d\n", sizeof(p));         //4 or 8
  // printf("%d\n", sizeof(p + 1));     //4 or 8
  // printf("%d\n", sizeof(*p));        //1
  // printf("%d\n", sizeof(p[0]));      //1    -->   p[0]==*(p+0)
  // printf("%d\n", sizeof(&p));        //4 or 8
  // printf("%d\n", sizeof(&p + 1));    //4 or 8
  // printf("%d\n", sizeof(&p[0] + 1)); //4 or 8

  // char *p = "abcdef";
  // printf("%d\n", strlen(p));         //6
  // printf("%d\n", strlen(p + 1));     //5
  // printf("%d\n", strlen(*p));        //err
  // printf("%d\n", strlen(p[0]));      //err
  // printf("%d\n", strlen(&p));        //随机值
  // printf("%d\n", strlen(&p + 1));    //随机值
  // printf("%d\n", strlen(&p[0] + 1)); //5

  // int a[3][4] = {0};
  // printf("%d\n", sizeof(a));            //12 * 4 = 48
  // printf("%d\n", sizeof(a[0][0]));      //4
  // printf("%d\n", sizeof(a[0]));         //16
  // printf("%d\n", sizeof(a[0] + 1));     //4 or 8  -->  a[0]作为数组名并没有单独放在sizeof内部。也没取地址，所以a[0]就是第一行第一个元素的地址，a[0]+1
  //                                       //             就是第一行第二个元素的地址
  // printf("%d\n", sizeof(*(a[0] + 1)));  //4
  // printf("%d\n", sizeof(a + 1));        //4 or 8
  // printf("%d\n", sizeof(*(a + 1)));     //4 * 4 = 16
  // printf("%d\n", sizeof(&a[0] + 1));    //4 or 8
  // printf("%d\n", sizeof(*(&a[0] + 1))); //4 * 4 = 16
  // printf("%d\n", sizeof(*a));           //4 * 4 = 16
  // printf("%d\n", sizeof(a[3]));         //4 * 4 = 16(即使越界)

  // short s = 5;
  // int a = 4;
  // printf("%d ", s = a + 6); //2
  // printf("%d ", s);         //5   -->  sizeof内部放的表达式不参与运算

  // int a[5] = {1, 2, 3, 4, 5};
  // int *ptr = (int *)(&a + 1);
  // printf("%d %d", *(a + 1), *(ptr - 1));
  // //打印 2, 5

  
  // return 0;
}
